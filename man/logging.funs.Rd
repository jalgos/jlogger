% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jlogger.R
\name{logging.funs}
\alias{logging.funs}
\alias{jlog.trace}
\alias{jlwrite.trace}
\alias{jlprint.trace}
\alias{jlog.debug}
\alias{jlwrite.debug}
\alias{jlog.info}
\alias{jlprint.debug}
\alias{jlwrite.info}
\alias{jlprint.info}
\alias{jlwrite.warn}
\alias{jlog.warn}
\alias{jlprint.warn}
\alias{jlog.error}
\alias{jlwrite.error}
\alias{jlprint.error}
\alias{jlog.fatal}
\alias{jlwrite.fatal}
\alias{jlprint.fatal}
\title{Functions used to log}
\usage{
jlog.trace(jlogger, ...)

jlwrite.trace(jlogger, ...)

jlprint.trace(jlogger, ...)

jlog.debug(jlogger, ...)

jlwrite.debug(jlogger, ...)

jlog.info(jlogger, ...)

jlprint.debug(jlogger, ...)

jlwrite.info(jlogger, ...)

jlprint.info(jlogger, ...)

jlwrite.warn(jlogger, ...)

jlog.warn(jlogger, ...)

jlprint.warn(jlogger, ...)

jlog.error(jlogger, ...)

jlwrite.error(jlogger, ...)

jlprint.error(jlogger, ...)

jlog.fatal(jlogger, ...)

jlwrite.fatal(jlogger, ...)

jlprint.fatal(jlogger, ...)
}
\arguments{
\item{jlogger}{The JLogger object. It's level combined with the functions level will decide whether the message is logged.}

\item{...}{Objects to be printed. They will be handled by the lower level functions}

\item{prechar}{A character that can be printed before the message. Useful if you want to have a statement that erases itself.}

\item{endline}{What should be used as an endline delimiter. Defaults to newline.}
}
\description{
Utility function to log messages. Several kind of logging functions are provided for handling different use cases. Each type of function handles 6 levels of logging ranging from TRACE to FATAL.
}
\details{
JLoggers have several logging levels ranking as such: TRACE, DEBUG, INFO, WARNING, ERROR, FATAL. Establishing the logging level to a given rank will turn off messages of lower rank and print all other messages.\cr
For example setting the level to INFO will print infos, warnings, errors and fatal messages.
A good practice to use appropriate logging level could be the following. Trace messages are there to fully trace each action a complex algorithm takes. This is for development purposes.\cr
Debug messages are here for testing when a programs runs but breaks often. It allows the developper to have a good idea though not exhaustive of the actions the program took.\cr
Info messages are messages that you will want the end user to see. They should give information about the current state of the program.\cr
Warnings indicate that the program is facing an edge case, had to make assumptions about some data, had to convert some data, had to skip or make some extra steps, etc...\cr
Warnings can occur without impacting the functionning of the program.\cr
Error messages are to be put when the program is out of its range of function. It does not necessarily mean that the program cannot continue but it can mean that a subtask had to be aborted due to a dubious state.\cr
Fatal messages are the highest level of logging and they indicate that the program is about to stop due to an error it cannot recover from and anything more severe.\cr
JLoggers offer several ways of messaging. \code{jlog*} is a simple wrapper around \code{cat}, \code{jlwrite*} wraps \code{write} and \code{jlprint*} wrap \code{print}. Each function categories can be use to handle different types of data.\cr
}
